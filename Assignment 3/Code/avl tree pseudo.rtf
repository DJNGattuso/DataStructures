{\rtf1\ansi\ansicpg1252\cocoartf1504\cocoasubrtf820
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\margl1440\margr1440\vieww13800\viewh10100\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \
public class AVLTree extends NodeForTree\
\{\
	@Override\
	public void addElement(char value)\
	\{	Note: add parameter to keep track of the parent\
		//add element\
		//setDepth(added Node)\
		//checkDepth\
		//if checkDepth returns a node, rotate  \
	\}\
\
	public NodeForTree checkDepth(NodeForTree temp)\
	\{\
		//go up tree using parent and check depth, stop at root\
		//if depth == 2, return that node\
		//else return null\
	\}\
\
	public setDepth(NodeForTree temp)\
	\{\
		//find max height between left and right child using max then add 1\
		//repeat for all parents until root\
	\}\
\
	public rotateLeft(NodeForTree temp)\
	\{\
		https://stackoverflow.com/questions/13638005/avl-tree-rotation-in-java\
	\}\
\
	public rotateRight(NodeForTree temp)\
	\{\
	\}\
\
	public doubleRotationLeft()\
	\{\
		https://users.cs.fiu.edu/~weiss/dsaajava/code/DataStructures/AvlTree.java\
	\}\
\
	public doubleRotationRight()\
	\{\
	\}\
\}}